local this={}
---------------------------------------------------
local version = "CS-OS v.2.12"
---------------------------------------------------
local tickSleepDuration = 0.01
---------------------------------------------------
local termTextColor = term.getTextColor()
local termBackgroundColor = term.getBackgroundColor()
local termW, termH = term.getSize()
---------------------------------------------------
function this.GetVersion() return version end
---------------------------------------------------
function this.Sleep() sleep(tickSleepDuration) end
---------------------------------------------------
function this.DisplayMessage(message)
  term.setCursorPos(1, termH)
  term.clearLine()
  term.write("> " .. message)
end
---------------------------------------------------
function this.DisplayError(message)
  term.setCursorPos(1, termH)
  term.clearLine()
  term.setTextColor(colors.red)
  term.write("> ERROR: " .. message)
  term.setTextColor(termTextColor)
end
---------------------------------------------------
function this.ProgressTick()
  pbar:IncValue()
  pbar:Draw()
end
---------------------------------------------------
function this.Start(extrasteps)
  term.clear()
  term.setCursorPos(1,1)

  advterm = require("/csos/lib/req-advterm")
  advterm.Enable()
  term.reset()
  print("> AdvancedTerminal module enabled")
  this.Sleep()

  write("> Loading library class-progressbar ...")
  this.Sleep()
  local pbarClass = require("/csos/lib/class-progressbar")
  print(" DONE")
  this.Sleep()

  write("> Calculating terminal parameters ...")
  this.Sleep()
  termW, termH = term.getSize()
  termTextColor = term.getTextColor()
  print(" DONE")
  this.Sleep()

  write("> Loading user parameters ...")
  this.Sleep()
  cfgauth = require("/csos/cfg/auth")
  print(" DONE")
  this.Sleep()

  extrasteps = extrasteps or 0
  if CFG_AUTH_PASSWORD ~= "" then
    extrasteps = extrasteps + 2
  end

  term.reset()
  term.setCursorPos((termW - #version) / 2 + 1, termH / 2)
  term.setTextColor(colors.green)
  term.write(version)
  term.setTextColor(termTextColor)

  this.DisplayMessage("Initiating progress bar ...")
  this.Sleep()
  pbar = pbarClass.new(4, termH / 2 + 2, termW - 6, 3 + extrasteps)
  pbar:Draw()
  this.DisplayMessage("Initiating progress bar ... DONE")
  this.Sleep()

  this.DisplayMessage("Loading library req-speaker ...")
  this.ProgressTick()
  this.Sleep()
  libspeaker = require("/csos/lib/req-speaker")
  pbar:Draw()
  this.DisplayMessage("Loading library req-speaker ... DONE")
  this.ProgressTick()
  this.Sleep()

  if CFG_AUTH_PASSWORD ~= "" then
    this.DisplayMessage("Loading library class-frame ...")
    this.ProgressTick()
    this.Sleep()
    libframe = require("/csos/lib/class-frame")
    pbar:Draw()
    this.DisplayMessage("Loading library class-frame ... DONE")
    this.ProgressTick()
    this.Sleep()
  end
end
---------------------------------------------------
function this.Finish()
  this.DisplayMessage("Operating System boot complete")
  this.ProgressTick()
  sleep(2.5)
  this.Auth()
  libspeaker.Success()
end
---------------------------------------------------
function this.Auth()
  if CFG_AUTH_PASSWORD == "" then return end

  while true do
    term.reset()

    term.setCursorPos(1, termH)
    term.setTextColor(colors.green)
    write(version)
    term.setTextColor(termTextColor)

    local frameW = 14 + math.max(CFG_AUTH_LOGIN:len(), CFG_AUTH_PASSWORD:len())
    local frameH = 7
    local frameX = (termW - frameW) / 2 + 1
    local frameY = 4
    local frame = libframe.new(frameX, frameY, frameW, frameH, "Login", colors.green)
    frame:Draw()

    term.setCursorPos(termW / 2 - 6 + 1, termH - 1)
    write("Hey, hacker")
    term.setCursorPos(termW / 2 - 9 + 1, termH)
    write("Ctrl+T still works")

    term.setCursorPos(frameX + 2, frameY + 2)
    write("Login   : " .. CFG_AUTH_LOGIN)
    term.setCursorPos(frameX + 2, frameY + 4)
    write("Password: ")
    inputPassword = read("*")

    if inputPassword == CFG_AUTH_PASSWORD then
      term.setCursorPos(termW / 2 - 7 + 1, 13)
      term.setTextColor(colors.green)
      print("Access granted")
      term.setTextColor(termTextColor)
      sleep(0.5)
      break
    else
      term.setCursorPos(termW / 2 - 16 + 1, 13)
      term.setTextColor(colors.red)
      print("Wrong login/password combination")
      term.setCursorPos(termW / 2 - 5 + 1, 14)
      print("Try again")
      term.setTextColor(termTextColor)
      libspeaker.Error()
      sleep(2)
    end
  end

  term.reset()
  term.setTextColor(termTextColor)
  term.setBackgroundColor(termBackgroundColor)
end
---------------------------------------------------
return this
